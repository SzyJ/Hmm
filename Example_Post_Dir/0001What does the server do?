The server uses a basic REST API structre where when a post is returned, it is in the following structure
<br>
<span class="code">{ID of the post}{Date of last modified}{Title}{Content}</span>
<br>
each of the sections, is seperated by a <span class="code">\000</span> (null terminator) byte. There is a <span class="code">\000</span> between each post returned too. So when your frontend receives a collection of posts, all you have to do is split the string on <span class="code">\000</span> and iterate over each of the sections (0, 1, 2, 3 is first post, 4, 5, 6,7 is second and so on...). By default 3 posts will be returned from one request.
<br>
<br>
If the ID section of a post is 0000, there will be no more sections after it so check the ID of each post first to avoid index out of bounds.
<br>
<br>
Why not just use JSON? A simple array of bytes being sent is easier to understand IMO and there is no need to overcomplicate things. If I need to update this to JSON, I might.
<br>
<br>
API endpoints:
<br>
<span class="code">your.website.com:8090/request/init</span>
<br>
Return up to 3 highest ID posts. Use this as the first call to the server.
<br>
<br>
<span class="code">your.website.com:8090/request/next/{Last Received ID}</span>
<br>
Return the 3 next highest ID posts after the provided ID. The last ID received will be the ID from the 3rd post of the init request or the 3rd post from the last next request. Once you receive a post with ID 0000, you have received all posts already and dont need to call this anymore.
<br>
<br>
<span class="code">your.website.com:8090/request/one/{Post ID}</span>
<br>
Return only one post with the given ID. If an invalid value is given or a post with that ID doesn't exist, returns 0000 instead. If 0000 is returned, an error message can be found after the null terminator. Use this if you want to display a page with only one post (eg for purposes of sharing a link with a perticular post)
<br>
<br>
Since this is just a simple HTTP GET request, you can see what is returned for yourself by using curl in your terminal. Be warned that there may be some issues for you when displaying <span class="code">\000</span> character in the terminal or text editor.
Try these:
<br>
<span class="code">curl http://szy.wtf:8090/request/init</span>
<br>
<span class="code">curl http://szy.wtf:8090/request/next</span>
<br>
<span class="code">curl http://szy.wtf:8090/request/one</span>
